<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ROS tutorial Hydro</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ROS tutorial - Indigo</h1>

<p>This tutorial will try to explain in a simple way how you can manage to have V-REP <em>ROS enabled</em> (by default, the V-REP distribution for Linux should be automatically <em>ROS enabled</em>), based on <a href="http://wiki.ros.org/indigo">ROS Indigo</a> and <a href="http://wiki.ros.org/catkin">Catkin</a>.</p>

<p>First of all you should make sure that you have gone through the <a href="http://www.ros.org/wiki/ROS/Tutorials">official ROS tutorials</a>, at least the beginner section. Then, we assume that you have the latest Ubuntu running, that ROS Indigo is installed, and that the workspace folders are set. Here also refer to the <a href="http://wiki.ros.org/indigo/Installation/Ubuntu">official documentation regarding the ROS installation</a>.</p>

<p>The general ROS functionality in V-REP is supported via a generic plugin (<em>libv_repExtRos.so</em> or <em>libv_repExtRos.dylib</em>). The Linux distribution should include that file already compiled. You might however experience plugin load problems, depending on your system specificities: make sure to always inspect the terminal window of V-REP for details about plugin load operations. Plugins are loaded when V-REP is launched. The ROS plugin to V-REP will only successfully load and initialize if <em>roscore</em> is running at that time (<em>roscore</em> is the ROS master).</p>

<p>If the plugin cannot be loaded, then you should recompile it yourself. The plugin is open source and can be modified as much as needed in order to support a specific feature or to extend its functionality. The <em>programming/ros_packages</em> folder contains 6 packages:</p>

<li><strong>ros_bubble_rob</strong>: this is the package of a very simple robot controller that connects to V-REP via ROS.</li>
<li><strong>vrep_common</strong>: this package is used to generate the services and stream messages needed to implement the V-REP API functions. Having the services and stream messages in a separate package allows for other application to use them in order to communicate with V-REP via ROS in a convenient way.</li>
<li><strong>vrep_plugin</strong>: this package is the actual plugin that will be compiled to a &quot;.so&quot; file, and that is used by V-REP.</li>
<li><strong>vrep_joy</strong>: this package enables interaction with a joystick.</li>
<li><strong>vrep_skeleton_msg_and_srv</strong> and <strong>vrep_plugin_skeleton</strong>: those two packages are equivalent to <em>vrep_common</em> and <em>vrep_plugin</em>, and can be used to create your own specific ROS plugin for V-REP (e.g. to support ROS messages for a specific robot, in V-REP).</li>



<p>Above packages should be copied to your <em>catkin_ws/src</em><em> </em>folder. Make sure that ROS is aware of those packages, i.e. that you can switch to above package folders with:</p>
<pre class=lightGreyBox>
$ roscd vrep_common
$ roscd vrep_plugin
$ roscd vrep_joy
$ roscd ros_bubble_rob
$ roscd vrep_skeleton_msg_and_srv
$ roscd vrep_plugin_skeleton</pre>

<p>In order to build the packages, navigate to the <em>catkin_ws</em> folder and type:</p>

<pre class=lightGreyBox>
$ catkin_make</pre>

<p>That's it! The plugins should have been generated (i.e. <em>libv_repExtRos.so</em> and <em>libv_repExtRosSkeleton.so</em>), as well as the <em>ros_bubble_rob</em> executable. Copy and paste the created plugins to the V-REP installation folder. The plugins are now ready to be used!</p>
<p>Make sure you have installed all required items for the compilation to work without problem. For example, the<em> vrep_joy</em> package requires that you have the joystick drivers installed:</p>


<pre class=lightGreyBox>
$ sudo apt-get install ros-indigo-pr2-controllers ros-indigo-joystick-drivers</pre>



<p>Once you have the ROS plugin in place, open a terminal and start the ROS master with:</p>
<pre class=lightGreyBox>
$ roscore</pre>


<p>Open another terminal, move to the V-REP installation folder and start V-REP. This is what you should have (or similar):</p>

<pre class=lightGreyBox>
$ ./vrep.sh
License file 'v_rep':
---> ok
Simulator launched.
Plugin 'BubbleRob': loading...
Plugin 'BubbleRob': load succeeded.
Plugin 'K3': loading...
Plugin 'K3': load succeeded.
Plugin 'RemoteApi': loading...
Plugin 'RemoteApi': load succeeded.
Plugin 'Ros': loading...
Plugin 'Ros': load succeeded.</pre>


<p>Upon succesful ROS plugin load, checking the available nodes gives this:</p>
<pre class=lightGreyBox>
$ rosnode list
/rosout
/vrep</pre>

<p>The &quot;/vrep&quot; node is the node that the plugin has spawned. All services should be advertised:</p>
<pre class=lightGreyBox>
$ rosservice list
/rosout/get_loggers
/rosout/set_logger_level
/vrep/get_loggers
/vrep/set_logger_level
/vrep/simRosAddStatusbarMessage
/vrep/simRosAuxiliaryConsoleClose
/vrep/simRosAuxiliaryConsoleOpen
/vrep/simRosAuxiliaryConsolePrint
/vrep/simRosAuxiliaryConsoleShow

...

/vrep/simRosStopSimulation
/vrep/simRosSynchronous
/vrep/simRosSynchronousTrigger
/vrep/simRosTransferFile</pre>


<p>Refer to the  <a href="rosFunctionListAlphabetical.htm">full list of services that V-REP supports</a>. Checking the available topics yields this:</p>

<pre class=lightGreyBox>
$ rostopic list
/rosout
/rosout_agg
/vrep/info</pre>






<p>As you can see, there is a single V-REP topic that is advertised: &quot;info&quot;. The <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">info publisher</a> is the only one that is started as soon as the plugin is launched. All other <a href="rosPublishers.htm">V-REP topic publishers</a> or <a href="rosSubscribers.htm">V-REP topic subscribers</a> have to be individually enabled. This can only happen while a simulation is running. Two equivalent mechanisms are supported for enabling/disabling publishers/subscribers:</p>

<li><strong>Scripting</strong>: following functions are supported from within a <a href="scripts.htm">script</a>: <a href="rosPublishers.htm#simExtROS_enablePublisher">simExtROS_enablePublisher</a>, <a href="rosPublishers.htm#simExtROS_disablePublisher">simExtROS_disablePublisher</a>, <a href="rosSubscribers.htm#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a> and <a href="rosSubscribers.htm#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>.</li>

<li><strong>ROS services</strong>: four of the many ROS services that V-REP advertises can be used to enable/disable publishers/subscribers:<a href="rosServices.htm#simRosEnablePublisher">simRosEnablePublisher</a>, <a href="rosServices.htm#simRosDisablePublisher">simRosDisablePublisher</a>, <a href="rosServices.htm#simRosEnableSubscriber">simRosEnableSubscriber</a> and <a href="rosServices.htm#simRosDisableSubscriber">simRosDisableSubscriber</a>.</li>


<p> There are many supported <a href="rosPublisherTypes.htm">publisher types</a> or <a href="rosSubscriberTypes.htm">subscriber types</a>, and there is no limit in number of activated publishers/subscribers. All enabled publishers and subscribers will be automatically disabled when a simulation ends. Only the <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">info publisher </a>will continue running.</p>
<p>Try following example to start a simulation:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosStartSimulation
result: 1</pre>

<p>Following command will stop a running simulation:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosStopSimulation
result: 1</pre>

<p>Depending on the type of arguments, you will have to adapt the way you format the argument list. For instance:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosSetObjectPosition 54 57 '[0,0,0]'
result: 1</pre>

<p>or when having negative numbers in your arguments:</p>

<pre class=lightGreyBox>
$ rosservice call /vrep/simRosSetObjectPosition -- 54 -1 '[0,0,0]'
result: 1</pre>

<p>For more details about how to format your argument list, refer to <a href="http://wiki.ros.org/ROS/YAMLCommandLine">this page</a>.</p>

<p>Now load the demo scene &quot;rosTopicPublisherAndSubscriber.ttt&quot;, and run the simulation. The code in the <a href="childScripts.htm">child script</a> attached to &quot;Vision_sensor&quot; will enable a publisher to stream the vision sensor's image, and also enable a subscriber to listen to that same stream. The subscriber automatically applies the read data to the object/item it refers to (in that case a passive vision sensor, that is only used as a data container). So V-REP is streaming data, while listening to the same data! This is what is happening:</p>

<p align=center><img src="images/rosTut1.jpg"></p>
<p class=imageLabel>[Image publisher and image subscriber demo]</p>
<br>



<p>Make sure to double-click on the script icon next to object &quot;Vision_sensor&quot; in the scene hierarchy: this will open the script. Try experimenting a little bit with the code. You can also visualize the image that V-REP streams with following command:</p>

<pre class=lightGreyBox>
$ rosrun image_view image_view image:=/vrep/visionSensorData</pre>


<p>Had you been streaming simpler data, then you could also have visualized it with:</p>

<pre class=lightGreyBox>
$ rostopic echo /vrep/visionSensorData</pre>


<p>Now stop the simulation and load the demo scene &quot;controlTypeExamples.ttt&quot;, and run the simulation. The scene illustrates the 5 control methods currently supported in V-REP. The robots are simplistic, and also behaving in a simplistic way for simplification purposes. Run the simulation and focus on the red robot, which is controlled via ROS:</p>

<p align=center><img src="images/rosTut2.jpg"></p>
<p class=imageLabel>[External client application controlling the red robot via ROS]</p>
<br>



<p>The child script attached to the red robot, and running in a threaded fashion, is in charge of following:</p>

<li>determine some object handles (i.e. motor joint handles and proximity sensor handle)</li>
<li>verify if the ROS plugin is loaded</li>
<li>add a banner</li>
<li>and finally launch a client application. The application is called with the object handles as arguments. The client application (&quot;rosBubbleRob&quot;) is then taking over the control of the red robot via ROS.</li>

<p>After executing above's steps, the threaded child script ends, but the simulation continues..</p>
<p>While simulation is running, copy and paste a few times the red robot (well, actually any of the robots!). Notice that every copy is directly operational and independent. This is one of the many strengths of V-REP!</p>
<p>Type following to inspect the data being streamed from/to V-REP:</p>
<pre class=lightGreyBox>
$ rostopic list
/rosBubbleRob11808854/wheel
/rosBubbleRob11814031/wheel
/rosBubbleRob11818573/wheel
/rosout
/rosout_agg
/vrep/info
/vrep/proxData11808854
/vrep/proxData11814031
/vrep/proxData11818573</pre>



<p>Each instance of the rosBubbleRob client will enable V-REP publishers/subscribers on a different topic name (in above example there are 3 instances of &quot;rosBubbleRob&quot; running at the same time)</p>

<p>Make sure to have a look at the rosBubbleRob client code, which contains many explanatory comments.</p>

<p>Finally, make sure to have a look at the <a href="remoteApiOverview.htm">remote API functionality</a> in V-REP: similarly to ROS, it allows for remote function execution, fast data streaming back and forth, is much simpler to use, leightweight, cross-platform, and available for 5 different languages. It can be an interesting alternative to ROS in some cases.</p>

<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
